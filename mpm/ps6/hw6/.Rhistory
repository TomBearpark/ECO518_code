y <- c()
y[1] <- 1
for (i in 2:N){
y[i] <- y[i-1] +  rnorm(1)
}
plot.ts(y)
lm(y~lag(y))
N <- 1000
y <- c()
y[1] <- 1
for (i in 2:N){
y[i] <- y[i-1] +  rnorm(1)
}
plot.ts(y)
lm(y~lag(y))
N <- 1000
y <- c()
y[1] <- 1
for (i in 2:N){
y[i] <- y[i-1] +  rnorm(1)
}
plot.ts(y)
lm(y~lag(y))
for (i in 2:N){
y[i] <- 1.01*y[i-1] +  rnorm(1)
}
plot.ts(y)
install.packages("FKF")
library(FKF)
mat <- matrix(
c(-2, 0, -1, 0,
0, 0,  0, 0,
1,0,0,0,
0,1,0,0), ncol = 4
)
mat
eigen(mat)
pacman::p_load(mcompanion)
JordanDecomposition(mat)
jordan(mat)
reticulate::repl_python()
quit()
??plotir
mat <-
matrix(c(
-2,0,-1,0,
0,0,0,0,
1,0,0,0,
0,1,0,0
),
ncol = 4, nrow = 4
)
for (i in mat){
print(i)
}
mat
for (i in mat[i,i]){
print(i)
}
for (i in mat[i,i]){
print(i)
}
for (i in mat){
print(mat[i])
}
mat[1]
mat[0]
kronecker(mat)
reticulate::repl_python()
parse_phone_number <- function(number_string) {
number_string <- gsub("[^0-9]", "", number_string)
N <- nchar(number_string)
print(N)
if(! N %in% c(10, 11)) number_string <- NULL
number_string <- substr(number_string, N - 9,N + 1)
ifelse(substr(number_string, 1, 1) == "1", NULL, number_string )
}
parse_phone_number("12234567890")
parse_phone_number("(223) 056-7890")
parse_phone_number("321234567890")
parse_phone_number("(223) 056-7890")
library(ggplot2)
N <- 1000
sigma2 <- 1
print("test")
test <- function(x){
function(y) rep(y,x)
}
func <- test(10)
test("hello")
func("hello")
func()
func
incomes <- c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56,
61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46,
59, 46, 58, 43)
incmeans <- tapply(incomes, statef, mean)
state <- c("tas", "sa",  "qld", "nsw", "nsw", "nt",  "wa",  "wa",
"qld", "vic", "nsw", "vic", "qld", "qld", "sa",  "tas",
"sa",  "nt",  "wa",  "vic", "qld", "nsw", "nsw", "wa",
"sa",  "act", "nsw", "vic", "vic", "act")
statef <- factor(state)
incomes <- c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56,
61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46,
59, 46, 58, 43)
incmeans <- tapply(incomes, statef, mean)
incmeans
?tapply(vector, index, function)
?tapply
data(mtcars)
str(mtcars)
tapply(mtcars$mpg, mtcars$gear, function(x) sum(x))
tapply(mtcars$mpg, list(mtcars$gear, mtcars$carb), function(x) sum(x))
tapply(mtcars$mpg, c(mtcars$gear, mtcars$carb), function(x) sum(x))
tapply(mtcars$mpg, list(mtcars$gear, mtcars$carb), function(x) sum(x))
movies <- c("SPYDERMAN","BATMAN","VERTIGO","CHINATOWN")
movies_lower <-apply(movies, 2, tolower)
movies_lower <-apply(movies, 1, tolower)
movies_lower <- apply(movies, 1, tolower)
movies <- list("SPYDERMAN","BATMAN","VERTIGO","CHINATOWN")
movies_lower <- apply(movies, 1, tolower)
df <- tapply(mtcars$mpg, list(mtcars$gear, mtcars$carb), function(x) sum(x))
df
matrix(df)
data.frame(df)
tibble(df)
dplyr::tibble(df)
if(user == "tom") setwd("/Users/tombearpark/Documents/princeton/1st_year/term2/ECO518_Metrics2/ECO518_code/mpm/ps6/hw6/")
user  = "tom"
if(user == "tom") setwd("/Users/tombearpark/Documents/princeton/1st_year/term2/ECO518_Metrics2/ECO518_code/mpm/ps6/hw6/")
else setwd('/Users/ericqian/Princeton/Courses/ECO 518/homework/hw6')
if(user == "tom") setwd("/Users/tombearpark/Documents/princeton/1st_year/term2/ECO518_Metrics2/ECO518_code/mpm/ps6/hw6/")
else setwd('/Users/ericqian/Princeton/Courses/ECO 518/homework/hw6')
rm(list = ls(all.names = TRUE))
# Preliminaries ----
library(tidyverse)
library(sandwich)
library(lmtest)
rm(list = ls(all.names = TRUE))
user  = "tom"
if(user == "tom") setwd("/Users/tombearpark/Documents/princeton/1st_year/term2/ECO518_Metrics2/ECO518_code/mpm/ps6/hw6/")
else setwd('/Users/ericqian/Princeton/Courses/ECO 518/homework/hw6')
if(user == "tom") {
setwd("/Users/tombearpark/Documents/princeton/1st_year/term2/ECO518_Metrics2/ECO518_code/mpm/ps6/hw6/")
}
else{
setwd('/Users/ericqian/Princeton/Courses/ECO 518/homework/hw6')
}
if(user == "tom") {
setwd("/Users/tombearpark/Documents/princeton/1st_year/term2/ECO518_Metrics2/ECO518_code/mpm/ps6/hw6/")
}
else {
setwd('/Users/ericqian/Princeton/Courses/ECO 518/homework/hw6')
}
if(user == "tom") {
setwd("/Users/tombearpark/Documents/princeton/1st_year/term2/ECO518_Metrics2/ECO518_code/mpm/ps6/hw6/")
}else {
setwd('/Users/ericqian/Princeton/Courses/ECO 518/homework/hw6')
}
source('routines.R')
# Settings
nBoot = 500
QQ   = c(.025, .975)
# Question 1 ----
Raw = read.csv('Guns.csv')
df  = Raw
df  = Raw %>% mutate(lvio = log(vio), i_stateid = factor(stateid))
n   = nrow(df)
controls = "incarc_rate + density + avginc + pop + pb1064 + pw1064 + pm1029 + i_stateid"
form     = paste0('lvio ~ shall +', controls)
lm1      = lm(form, data = df)
se      = coeftest(lm1, vcovHC(lm1, type = "HC1"))['shall', 'Std. Error']
betaHat = lm1$coefficients['shall']
betaHat
Res_clust        = replicate(nBoot, cluster_boot(form, df, 'stateid'))
beta_clust       = sapply(Res_clust['coeff',], '[[', 'shall')
beta_clust_sd    = sd(beta_clust)
Res_clust
beta_clust
head(beta_clust)
Res_clust['coeff',]
beta_clust_sd    = sd(beta_clust)
beta_clust_sd
CI_clust_ef      = quantile(beta_clust, QQ)
CI_clust_ef
SE_clust         = sapply(Res_clust['SE',], '[[', 'shall')
SE_clust
t_clust          = (beta_clust - betaHat) / SE_clust
CI_clust_perc       = betaHat - quantile(t_clust,QQ)[c(2,1)] * beta_clust_sd
names(CI_np_perc) = names(CI_clust_perc)[c(2,1)]
# Non-parametric bootstrap
Res_np     = replicate(nBoot, np_boot(form, df))
Beta_np    = sapply(Res_np['coeff',], '[[', 'shall')
Beta_np_sd = sd(Beta_np)
CI_np_ef   = quantile(Beta_np, QQ)  # Efron
SE_np      = sapply(Res_np['SE',], '[[', 'shall')
t_np       = (Beta_np - betaHat) / SE_np
CI_np_perc = betaHat - quantile(t_np,QQ)[c(2,1)] * Beta_np_sd
names(CI_np_perc) = names(CI_np_perc)[c(2,1)]
# Parametric bootstrap (residual)
Beta_para    = replicate(nBoot, para_boot(form, df, lm1))
CI_para_ef   = quantile(Beta_para['shall',], QQ)
Beta_para_sd = sd(Beta_para['shall',])
# Clustered bootstrap
Res_clust        = replicate(nBoot, cluster_boot(form, df, 'stateid'))
beta_clust       = sapply(Res_clust['coeff',], '[[', 'shall')
beta_clust_sd    = sd(beta_clust)
CI_clust_ef      = quantile(beta_clust, QQ)
SE_clust         = sapply(Res_clust['SE',], '[[', 'shall')
t_clust          = (beta_clust - betaHat) / SE_clust
CI_clust_perc       = betaHat - quantile(t_clust,QQ)[c(2,1)] * beta_clust_sd
names(CI_np_perc) = names(CI_clust_perc)[c(2,1)]
CI_clust_perc
CI_clust_ef
QQ
hist(beta_clust)
beta_clust_sd
CI_clust_ef
quantile(t_clust,QQ)[c(2,1)]
SE_clust
beta_clust_sd
beta_clust_sd
betaHat
quantile(t_clust,QQ)[c(2,1)]
hist(t_clust)
t_clust          = sqrt(N) * (beta_clust - betaHat) / SE_clust
t_clust          = sqrt(n) * (beta_clust - betaHat) / SE_clust
hist(t_clust)
betaHat
beta_clust
SE_clust
t_clust          = sqrt(n) * (beta_clust - betaHat) / SE_clust
hist(t_clust)
CI_clust_perc       = betaHat - quantile(t_clust,QQ)[c(2,1)] * beta_clust_sd / sqrt(n)
names(CI_np_perc) = names(CI_clust_perc)[c(2,1)]
CI_clust_perc
quantile(t_clust,QQ)[c(2,1)]
beta_clust_sd
beta_clust       = sapply(Res_clust['coeff',], '[[', 'shall')
hist(beta_clust)
beta_clust_sd    = sd(beta_clust)
beta_clust_sd
CI_clust_ef      = quantile(beta_clust, QQ)
CI_clust_ef
CI_clust_ef
SE_clust         = sapply(Res_clust['SE',], '[[', 'shall')
beta_clust
betaHat
SE_clust
hist(SE_clust)
# Clustered bootstrap
cluster_boot = function(form, data, clusterVar){
# nClusters = length(unlist( unique(data[,clusterVar])))
#
#
#
# dataBoot = data %>% group_by(stateid) %>% group_nest() %>%
#   sample_n(nClusters, replace = TRUE) %>% unnest(data) %>% ungroup()
dataBoot <- df %>%
group_nest(state_fe) %>%
slice_sample(prop = 1, replace = TRUE) %>%
unnest(c(data))
lmBoot = lm(form, dataBoot)
SE   <- vcovCL(lmBoot, cluster = ~ state_fe)["shall", "shall"] %>% sqrt()
# SE     = coeftest(lmBoot, vcovCL(lmBoot, cluster= data[,clusterVar] ))[, "Std. Error"]
out    = list(lmBoot$coefficients, SE)
names(out) = c('coeff', 'SE')
return(out)
}
# Parametric bootstrap (residual)
Beta_para    = replicate(nBoot, para_boot(form, df, lm1))
CI_para_ef   = quantile(Beta_para['shall',], QQ)
Beta_para_sd = sd(Beta_para['shall',])
# Clustered bootstrap
Res_clust        = replicate(nBoot, cluster_boot(form, df, 'stateid'))
beta_clust       = sapply(Res_clust['coeff',], '[[', 'shall')
beta_clust       = sapply(Res_clust['coeff',], '[[', 'shall')
hist(beta_clust)
beta_clust_sd    = sd(beta_clust)
CI_clust_ef      = quantile(beta_clust, QQ)
df
names(df)
# Clustered bootstrap
cluster_boot = function(form, data, clusterVar){
# nClusters = length(unlist( unique(data[,clusterVar])))
#
#
#
# dataBoot = data %>% group_by(stateid) %>% group_nest() %>%
#   sample_n(nClusters, replace = TRUE) %>% unnest(data) %>% ungroup()
dataBoot <- df %>%
group_nest(state_fe) %>%
slice_sample(prop = 1, replace = TRUE) %>%
unnest(c(data))
lmBoot = lm(form, dataBoot)
SE   <- vcovCL(lmBoot, cluster = ~ i_stateid)["shall", "shall"] %>% sqrt()
# SE     = coeftest(lmBoot, vcovCL(lmBoot, cluster= data[,clusterVar] ))[, "Std. Error"]
out    = list(lmBoot$coefficients, SE)
names(out) = c('coeff', 'SE')
return(out)
}
# Clustered bootstrap
Res_clust        = replicate(nBoot, cluster_boot(form, df, 'stateid'))
# Clustered bootstrap
cluster_boot = function(form, data, clusterVar){
# nClusters = length(unlist( unique(data[,clusterVar])))
#
#
#
# dataBoot = data %>% group_by(stateid) %>% group_nest() %>%
#   sample_n(nClusters, replace = TRUE) %>% unnest(data) %>% ungroup()
dataBoot <- df %>%
group_nest(i_stateid) %>%
slice_sample(prop = 1, replace = TRUE) %>%
unnest(c(data))
lmBoot = lm(form, dataBoot)
SE   <- vcovCL(lmBoot, cluster = ~ i_stateid)["shall", "shall"] %>% sqrt()
# SE     = coeftest(lmBoot, vcovCL(lmBoot, cluster= data[,clusterVar] ))[, "Std. Error"]
out    = list(lmBoot$coefficients, SE)
names(out) = c('coeff', 'SE')
return(out)
}
# Clustered bootstrap
Res_clust        = replicate(nBoot, cluster_boot(form, df, 'stateid'))
# Clustered bootstrap
cluster_boot = function(form, data, clusterVar){
# nClusters = length(unlist( unique(data[,clusterVar])))
#
#
#
# dataBoot = data %>% group_by(stateid) %>% group_nest() %>%
#   sample_n(nClusters, replace = TRUE) %>% unnest(data) %>% ungroup()
dataBoot <- data %>%
group_nest(i_stateid) %>%
slice_sample(prop = 1, replace = TRUE) %>%
unnest(c(data))
lmBoot = lm(form, dataBoot)
SE   <- vcovCL(lmBoot, cluster = ~ i_stateid)["shall", "shall"] %>% sqrt()
# SE     = coeftest(lmBoot, vcovCL(lmBoot, cluster= data[,clusterVar] ))[, "Std. Error"]
out    = list(lmBoot$coefficients, SE)
names(out) = c('coeff', 'SE')
return(out)
}
# Parametric bootstrap (residual)
Beta_para    = replicate(nBoot, para_boot(form, df, lm1))
CI_para_ef   = quantile(Beta_para['shall',], QQ)
Beta_para_sd = sd(Beta_para['shall',])
# Clustered bootstrap
Res_clust        = replicate(nBoot, cluster_boot(form, df, 'stateid'))
# Clustered bootstrap
cluster_boot = function(form, data, clusterVar){
# nClusters = length(unlist( unique(data[,clusterVar])))
#
#
#
# dataBoot = data %>% group_by(stateid) %>% group_nest() %>%
#   sample_n(nClusters, replace = TRUE) %>% unnest(data) %>% ungroup()
dataBoot <- data %>%
group_nest(i_stateid) %>%
slice_sample(prop = 1, replace = TRUE) %>%
unnest(c(data))
lmBoot = lm(form, dataBoot)
SE   <- vcovCL(lmBoot, cluster = ~ i_stateid)["shall", "shall"] %>% sqrt()
# SE     = coeftest(lmBoot, vcovCL(lmBoot, cluster= data[,clusterVar] ))[, "Std. Error"]
out    = list(lmBoot$coefficients, SE)
names(out) = c('coeff', 'SE')
return(out)
}
cluster_boot(form, df, 'stateid')
# Clustered bootstrap
cluster_boot = function(form, data, clusterVar){
# nClusters = length(unlist( unique(data[,clusterVar])))
#
#
#
# dataBoot = data %>% group_by(stateid) %>% group_nest() %>%
#   sample_n(nClusters, replace = TRUE) %>% unnest(data) %>% ungroup()
browser()
dataBoot <- data %>%
group_nest(i_stateid) %>%
slice_sample(prop = 1, replace = TRUE) %>%
unnest(c(data))
lmBoot = lm(form, dataBoot)
SE   <- vcovCL(lmBoot, cluster = ~ i_stateid)["shall", "shall"] %>% sqrt()
# SE     = coeftest(lmBoot, vcovCL(lmBoot, cluster= data[,clusterVar] ))[, "Std. Error"]
out    = list(lmBoot$coefficients, SE)
names(out) = c('coeff', 'SE')
return(out)
}
cluster_boot(form, df, 'stateid')
cluster_boot(form, df, 'stateid')
dataBoot
vcovCL(lmBoot, cluster = ~ i_stateid)["shall", "shall"] %>% sqrt()
vcovCL(lmBoot, cluster = ~ i_stateid)
library(sandwich)
vcovCL(lmBoot, cluster = ~ i_stateid)
lmBoot
diag(vcovCL(lmBoot, cluster = ~ i_stateid))
?vcovCL
dataBoot
coeftest(lmBoot, vcovCL(lmBoot, cluster= data[,clusterVar] ))[, "Std. Error"]
diag(vcovCL(lmBoot, cluster = dataBoot$i_stateid))
dataBoot
# Clustered bootstrap
cluster_boot = function(form, data, clusterVar){
# nClusters = length(unlist( unique(data[,clusterVar])))
#
#
#
# dataBoot = data %>% group_by(stateid) %>% group_nest() %>%
#   sample_n(nClusters, replace = TRUE) %>% unnest(data) %>% ungroup()
browser()
dataBoot <- data %>%
group_nest(i_stateid) %>%
slice_sample(prop = 1, replace = TRUE) %>%
unnest(c(data))
lmBoot = lm(form, dataBoot)
SE   <- vcovCL(lmBoot, cluster =dataBoot$i_stateid)["shall", "shall"] %>% sqrt()
# SE     = coeftest(lmBoot, vcovCL(lmBoot, cluster= data[,clusterVar] ))[, "Std. Error"]
out    = list(lmBoot$coefficients, SE)
names(out) = c('coeff', 'SE')
return(out)
}
cluster_boot(form, df, 'stateid')
# Clustered bootstrap
cluster_boot = function(form, data, clusterVar){
# nClusters = length(unlist( unique(data[,clusterVar])))
#
#
#
# dataBoot = data %>% group_by(stateid) %>% group_nest() %>%
#   sample_n(nClusters, replace = TRUE) %>% unnest(data) %>% ungroup()
# browser()
dataBoot <- data %>%
group_nest(i_stateid) %>%
slice_sample(prop = 1, replace = TRUE) %>%
unnest(c(data))
lmBoot = lm(form, dataBoot)
SE   <- vcovCL(lmBoot, cluster =dataBoot$i_stateid)["shall", "shall"] %>% sqrt()
# SE     = coeftest(lmBoot, vcovCL(lmBoot, cluster= data[,clusterVar] ))[, "Std. Error"]
out    = list(lmBoot$coefficients, SE)
names(out) = c('coeff', 'SE')
return(out)
}
cluster_boot(form, df, 'stateid')
# Clustered bootstrap
Res_clust        = replicate(nBoot, cluster_boot(form, df, 'stateid'))
beta_clust       = sapply(Res_clust['coeff',], '[[', 'shall')
hist(beta_clust)
beta_clust_sd    = sd(beta_clust)
CI_clust_ef      = quantile(beta_clust, QQ)
SE_clust         = sapply(Res_clust['SE',], '[[', 'shall')
SE_clust
Res_clust
Res_clust['SE',]
unlist(SE_clust)
SE_clust = unlist(SE_clust)
hist(SE_clust)
CI_clust_perc       = betaHat - quantile(t_clust,QQ)[c(2,1)] * beta_clust_sd / sqrt(n)
names(CI_np_perc) = names(CI_clust_perc)[c(2,1)]
CI_clust_perc
CI_clust_ef
quantile(t_clust,QQ)[c(2,1)]
hist(t_clust)
# Settings
nBoot = 1000
QQ   = c(.025, .975)
Res_clust        = replicate(nBoot, cluster_boot(form, df, 'stateid'))
beta_clust       = sapply(Res_clust['coeff',], '[[', 'shall')
hist(beta_clust)
beta_clust_sd    = sd(beta_clust)
CI_clust_ef      = quantile(beta_clust, QQ)
SE_clust         = sapply(Res_clust['SE',], '[[', 'shall')
SE_clust = unlist(SE_clust)
t_clust          = sqrt(n) * (beta_clust - betaHat) / SE_clust
hist(SE_clust)
CI_clust_perc       = betaHat - quantile(t_clust,QQ)[c(2,1)] * beta_clust_sd / sqrt(n)
names(CI_np_perc) = names(CI_clust_perc)[c(2,1)]
CI_clust_perc
hist(SE_clust)
hist(SE_clust, width = 1)
?hist
mean(SE_clust)
Res_clust
cluster_boot(form, df, 'stateid')
cluster_boot(form, df, 'stateid')['SE', ]
cluster_boot(form, df, 'stateid')['SE', "shall"]
beta_clust_sd
quantile(t_clust,QQ)[c(2,1)]
t_clust
beta_clust
SE_clust
quantile(t_clust,QQ)
hist(t_clust)
nBoot
set.seed(123)
# Clustered bootstrap
Res_clust        = replicate(nBoot, cluster_boot(form, df, 'stateid'))
beta_clust       = sapply(Res_clust['coeff',], '[[', 'shall')
hist(beta_clust)
beta_clust_sd    = sd(beta_clust)
CI_clust_ef      = quantile(beta_clust, QQ)
SE_clust         = sapply(Res_clust['SE',], '[[', 'shall')
Res_clust
Res_clust['SE',]
# SE_clust         = sapply(Res_clust['SE',], '[[', 'shall')
SE_clust         = unlist(SE_clust)
t_clust          = sqrt(n) * (beta_clust - betaHat) / SE_clust
hist(t_clust)
hist(se)
hist(SE_clust)
form
